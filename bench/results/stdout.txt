Run all benchmarks without asking? (y/N) y
----------------------------------------
Perform read benchmarks? (y/N) (automatic yes)
Creating databases using C program (unless they already exist)...
    Creating database ./tmp/read/test_2500000_20_100... success.
    Creating database ./tmp/read/test_2500000_20_200... success.
    Creating database ./tmp/read/test_2500000_20_300... success.
    Creating database ./tmp/read/test_2500000_40_100... success.
    Creating database ./tmp/read/test_2500000_40_200... success.
    Creating database ./tmp/read/test_2500000_40_300... success.
    Creating database ./tmp/read/test_2500000_60_100... success.
    Creating database ./tmp/read/test_2500000_60_200... success.
    Creating database ./tmp/read/test_2500000_60_300... success.
Measuring read-cursor...
    Timing database ./tmp/read/test_2500000_20_100 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_100 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_100 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_100 with Haskell (streamly, unsafe-unsafeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_100 with Haskell (streamly, unsafe-unsafeffi-txn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_100 with Haskell (streamly, unsafe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_100 with Haskell (streamly, safe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/read/read-cursor.csv
    Timing database ./tmp/read/test_2500000_20_200 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_200 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_200 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_200 with Haskell (streamly, unsafe-unsafeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_200 with Haskell (streamly, unsafe-unsafeffi-txn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_200 with Haskell (streamly, unsafe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_200 with Haskell (streamly, safe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/read/read-cursor.csv
    Timing database ./tmp/read/test_2500000_20_300 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_300 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_300 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_300 with Haskell (streamly, unsafe-unsafeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_300 with Haskell (streamly, unsafe-unsafeffi-txn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_300 with Haskell (streamly, unsafe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_20_300 with Haskell (streamly, safe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/read/read-cursor.csv
    Timing database ./tmp/read/test_2500000_40_100 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_100 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_100 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_100 with Haskell (streamly, unsafe-unsafeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_100 with Haskell (streamly, unsafe-unsafeffi-txn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_100 with Haskell (streamly, unsafe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_100 with Haskell (streamly, safe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/read/read-cursor.csv
    Timing database ./tmp/read/test_2500000_40_200 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_200 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_200 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_200 with Haskell (streamly, unsafe-unsafeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_200 with Haskell (streamly, unsafe-unsafeffi-txn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_200 with Haskell (streamly, unsafe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_200 with Haskell (streamly, safe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/read/read-cursor.csv
    Timing database ./tmp/read/test_2500000_40_300 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_300 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_300 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_300 with Haskell (streamly, unsafe-unsafeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_300 with Haskell (streamly, unsafe-unsafeffi-txn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_300 with Haskell (streamly, unsafe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_40_300 with Haskell (streamly, safe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/read/read-cursor.csv
    Timing database ./tmp/read/test_2500000_60_100 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_100 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_100 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_100 with Haskell (streamly, unsafe-unsafeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_100 with Haskell (streamly, unsafe-unsafeffi-txn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_100 with Haskell (streamly, unsafe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_100 with Haskell (streamly, safe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/read/read-cursor.csv
    Timing database ./tmp/read/test_2500000_60_200 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_200 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_200 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_200 with Haskell (streamly, unsafe-unsafeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_200 with Haskell (streamly, unsafe-unsafeffi-txn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_200 with Haskell (streamly, unsafe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_200 with Haskell (streamly, safe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/read/read-cursor.csv
    Timing database ./tmp/read/test_2500000_60_300 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_300 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_300 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_300 with Haskell (streamly, unsafe-unsafeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_300 with Haskell (streamly, unsafe-unsafeffi-txn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_300 with Haskell (streamly, unsafe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Timing database ./tmp/read/test_2500000_60_300 with Haskell (streamly, safe-safeffi-notxn)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/read/read-cursor.csv
Time taken for read benchmarks: 1.738057 hours.
----------------------------------------
Test write functionality? (I.e., that all LMDB databases created in write benchmarks are the same?) (y/N) (automatic yes)
  (pairCount,kFactor,vFactor)=(300000,20,100)
    Writing database ./tmp/write-test/test_300000_20_100 with C...
        Dumping it...
        Computing dump SHA-1 hash... 462b687574f30b821d6d20fc7463629f7077f6fd
    Writing database ./tmp/write-test/test_300000_20_100 with Haskell (plain, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 462b687574f30b821d6d20fc7463629f7077f6fd
    Writing database ./tmp/write-test/test_300000_20_100 with Haskell (plain, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 462b687574f30b821d6d20fc7463629f7077f6fd
    Writing database ./tmp/write-test/test_300000_20_100 with Haskell (streamly, chunked, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 462b687574f30b821d6d20fc7463629f7077f6fd
    Writing database ./tmp/write-test/test_300000_20_100 with Haskell (streamly, chunked, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 462b687574f30b821d6d20fc7463629f7077f6fd
    Writing database ./tmp/write-test/test_300000_20_100 with Haskell (streamly, splitupstream, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 462b687574f30b821d6d20fc7463629f7077f6fd
    Writing database ./tmp/write-test/test_300000_20_100 with Haskell (streamly, splitupstream safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 462b687574f30b821d6d20fc7463629f7077f6fd
  Hashes MATCH
  (pairCount,kFactor,vFactor)=(300000,20,200)
    Writing database ./tmp/write-test/test_300000_20_200 with C...
        Dumping it...
        Computing dump SHA-1 hash... f4696adcd1a11db787e566e66b387bbe4f2229e0
    Writing database ./tmp/write-test/test_300000_20_200 with Haskell (plain, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... f4696adcd1a11db787e566e66b387bbe4f2229e0
    Writing database ./tmp/write-test/test_300000_20_200 with Haskell (plain, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... f4696adcd1a11db787e566e66b387bbe4f2229e0
    Writing database ./tmp/write-test/test_300000_20_200 with Haskell (streamly, chunked, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... f4696adcd1a11db787e566e66b387bbe4f2229e0
    Writing database ./tmp/write-test/test_300000_20_200 with Haskell (streamly, chunked, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... f4696adcd1a11db787e566e66b387bbe4f2229e0
    Writing database ./tmp/write-test/test_300000_20_200 with Haskell (streamly, splitupstream, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... f4696adcd1a11db787e566e66b387bbe4f2229e0
    Writing database ./tmp/write-test/test_300000_20_200 with Haskell (streamly, splitupstream safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... f4696adcd1a11db787e566e66b387bbe4f2229e0
  Hashes MATCH
  (pairCount,kFactor,vFactor)=(300000,20,300)
    Writing database ./tmp/write-test/test_300000_20_300 with C...
        Dumping it...
        Computing dump SHA-1 hash... 865ce70e526db8c09e1b64c7bf8a91b0cce9b4e2
    Writing database ./tmp/write-test/test_300000_20_300 with Haskell (plain, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 865ce70e526db8c09e1b64c7bf8a91b0cce9b4e2
    Writing database ./tmp/write-test/test_300000_20_300 with Haskell (plain, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 865ce70e526db8c09e1b64c7bf8a91b0cce9b4e2
    Writing database ./tmp/write-test/test_300000_20_300 with Haskell (streamly, chunked, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 865ce70e526db8c09e1b64c7bf8a91b0cce9b4e2
    Writing database ./tmp/write-test/test_300000_20_300 with Haskell (streamly, chunked, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 865ce70e526db8c09e1b64c7bf8a91b0cce9b4e2
    Writing database ./tmp/write-test/test_300000_20_300 with Haskell (streamly, splitupstream, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 865ce70e526db8c09e1b64c7bf8a91b0cce9b4e2
    Writing database ./tmp/write-test/test_300000_20_300 with Haskell (streamly, splitupstream safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 865ce70e526db8c09e1b64c7bf8a91b0cce9b4e2
  Hashes MATCH
  (pairCount,kFactor,vFactor)=(300000,40,100)
    Writing database ./tmp/write-test/test_300000_40_100 with C...
        Dumping it...
        Computing dump SHA-1 hash... b59afab5088566d5c0fb0a483097e4d42c2ced6f
    Writing database ./tmp/write-test/test_300000_40_100 with Haskell (plain, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... b59afab5088566d5c0fb0a483097e4d42c2ced6f
    Writing database ./tmp/write-test/test_300000_40_100 with Haskell (plain, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... b59afab5088566d5c0fb0a483097e4d42c2ced6f
    Writing database ./tmp/write-test/test_300000_40_100 with Haskell (streamly, chunked, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... b59afab5088566d5c0fb0a483097e4d42c2ced6f
    Writing database ./tmp/write-test/test_300000_40_100 with Haskell (streamly, chunked, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... b59afab5088566d5c0fb0a483097e4d42c2ced6f
    Writing database ./tmp/write-test/test_300000_40_100 with Haskell (streamly, splitupstream, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... b59afab5088566d5c0fb0a483097e4d42c2ced6f
    Writing database ./tmp/write-test/test_300000_40_100 with Haskell (streamly, splitupstream safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... b59afab5088566d5c0fb0a483097e4d42c2ced6f
  Hashes MATCH
  (pairCount,kFactor,vFactor)=(300000,40,200)
    Writing database ./tmp/write-test/test_300000_40_200 with C...
        Dumping it...
        Computing dump SHA-1 hash... e1df29777b4ba8e72ee2a3f7884e86e84c328861
    Writing database ./tmp/write-test/test_300000_40_200 with Haskell (plain, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... e1df29777b4ba8e72ee2a3f7884e86e84c328861
    Writing database ./tmp/write-test/test_300000_40_200 with Haskell (plain, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... e1df29777b4ba8e72ee2a3f7884e86e84c328861
    Writing database ./tmp/write-test/test_300000_40_200 with Haskell (streamly, chunked, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... e1df29777b4ba8e72ee2a3f7884e86e84c328861
    Writing database ./tmp/write-test/test_300000_40_200 with Haskell (streamly, chunked, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... e1df29777b4ba8e72ee2a3f7884e86e84c328861
    Writing database ./tmp/write-test/test_300000_40_200 with Haskell (streamly, splitupstream, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... e1df29777b4ba8e72ee2a3f7884e86e84c328861
    Writing database ./tmp/write-test/test_300000_40_200 with Haskell (streamly, splitupstream safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... e1df29777b4ba8e72ee2a3f7884e86e84c328861
  Hashes MATCH
  (pairCount,kFactor,vFactor)=(300000,40,300)
    Writing database ./tmp/write-test/test_300000_40_300 with C...
        Dumping it...
        Computing dump SHA-1 hash... 23caeae9ef2f37ff3f6ce7232dbf3ac1a0e96e90
    Writing database ./tmp/write-test/test_300000_40_300 with Haskell (plain, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 23caeae9ef2f37ff3f6ce7232dbf3ac1a0e96e90
    Writing database ./tmp/write-test/test_300000_40_300 with Haskell (plain, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 23caeae9ef2f37ff3f6ce7232dbf3ac1a0e96e90
    Writing database ./tmp/write-test/test_300000_40_300 with Haskell (streamly, chunked, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 23caeae9ef2f37ff3f6ce7232dbf3ac1a0e96e90
    Writing database ./tmp/write-test/test_300000_40_300 with Haskell (streamly, chunked, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 23caeae9ef2f37ff3f6ce7232dbf3ac1a0e96e90
    Writing database ./tmp/write-test/test_300000_40_300 with Haskell (streamly, splitupstream, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 23caeae9ef2f37ff3f6ce7232dbf3ac1a0e96e90
    Writing database ./tmp/write-test/test_300000_40_300 with Haskell (streamly, splitupstream safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 23caeae9ef2f37ff3f6ce7232dbf3ac1a0e96e90
  Hashes MATCH
  (pairCount,kFactor,vFactor)=(300000,60,100)
    Writing database ./tmp/write-test/test_300000_60_100 with C...
        Dumping it...
        Computing dump SHA-1 hash... 436d8bbf59c60612276a0fa47e1dc2386f96b26c
    Writing database ./tmp/write-test/test_300000_60_100 with Haskell (plain, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 436d8bbf59c60612276a0fa47e1dc2386f96b26c
    Writing database ./tmp/write-test/test_300000_60_100 with Haskell (plain, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 436d8bbf59c60612276a0fa47e1dc2386f96b26c
    Writing database ./tmp/write-test/test_300000_60_100 with Haskell (streamly, chunked, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 436d8bbf59c60612276a0fa47e1dc2386f96b26c
    Writing database ./tmp/write-test/test_300000_60_100 with Haskell (streamly, chunked, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 436d8bbf59c60612276a0fa47e1dc2386f96b26c
    Writing database ./tmp/write-test/test_300000_60_100 with Haskell (streamly, splitupstream, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 436d8bbf59c60612276a0fa47e1dc2386f96b26c
    Writing database ./tmp/write-test/test_300000_60_100 with Haskell (streamly, splitupstream safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 436d8bbf59c60612276a0fa47e1dc2386f96b26c
  Hashes MATCH
  (pairCount,kFactor,vFactor)=(300000,60,200)
    Writing database ./tmp/write-test/test_300000_60_200 with C...
        Dumping it...
        Computing dump SHA-1 hash... 86d93c47d5a6530de74c6f9a0766a4a0187c6ecc
    Writing database ./tmp/write-test/test_300000_60_200 with Haskell (plain, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 86d93c47d5a6530de74c6f9a0766a4a0187c6ecc
    Writing database ./tmp/write-test/test_300000_60_200 with Haskell (plain, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 86d93c47d5a6530de74c6f9a0766a4a0187c6ecc
    Writing database ./tmp/write-test/test_300000_60_200 with Haskell (streamly, chunked, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 86d93c47d5a6530de74c6f9a0766a4a0187c6ecc
    Writing database ./tmp/write-test/test_300000_60_200 with Haskell (streamly, chunked, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 86d93c47d5a6530de74c6f9a0766a4a0187c6ecc
    Writing database ./tmp/write-test/test_300000_60_200 with Haskell (streamly, splitupstream, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 86d93c47d5a6530de74c6f9a0766a4a0187c6ecc
    Writing database ./tmp/write-test/test_300000_60_200 with Haskell (streamly, splitupstream safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 86d93c47d5a6530de74c6f9a0766a4a0187c6ecc
  Hashes MATCH
  (pairCount,kFactor,vFactor)=(300000,60,300)
    Writing database ./tmp/write-test/test_300000_60_300 with C...
        Dumping it...
        Computing dump SHA-1 hash... 56eec7e87229be82afb19869ed421e06b5f5dc7c
    Writing database ./tmp/write-test/test_300000_60_300 with Haskell (plain, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 56eec7e87229be82afb19869ed421e06b5f5dc7c
    Writing database ./tmp/write-test/test_300000_60_300 with Haskell (plain, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 56eec7e87229be82afb19869ed421e06b5f5dc7c
    Writing database ./tmp/write-test/test_300000_60_300 with Haskell (streamly, chunked, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 56eec7e87229be82afb19869ed421e06b5f5dc7c
    Writing database ./tmp/write-test/test_300000_60_300 with Haskell (streamly, chunked, safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 56eec7e87229be82afb19869ed421e06b5f5dc7c
    Writing database ./tmp/write-test/test_300000_60_300 with Haskell (streamly, splitupstream, unsafeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 56eec7e87229be82afb19869ed421e06b5f5dc7c
    Writing database ./tmp/write-test/test_300000_60_300 with Haskell (streamly, splitupstream safeffi)...
        Dumping it...
        Computing dump SHA-1 hash... 56eec7e87229be82afb19869ed421e06b5f5dc7c
  Hashes MATCH
Time taken for testing write benchmarks: 0.197666 hours.
----------------------------------------
Perform write benchmarks? (y/N) (automatic yes)
    Writing database ./tmp/write/test_300000_20_100 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_100 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_100 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_100 with Haskell (streamly, chunked, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_100 with Haskell (streamly, chunked, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_100 with Haskell (streamly, splitupstream, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_100 with Haskell (streamly, splitupstream safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/write/write.csv
    Writing database ./tmp/write/test_300000_20_200 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_200 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_200 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_200 with Haskell (streamly, chunked, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_200 with Haskell (streamly, chunked, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_200 with Haskell (streamly, splitupstream, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_200 with Haskell (streamly, splitupstream safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/write/write.csv
    Writing database ./tmp/write/test_300000_20_300 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_300 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_300 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_300 with Haskell (streamly, chunked, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_300 with Haskell (streamly, chunked, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_300 with Haskell (streamly, splitupstream, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_20_300 with Haskell (streamly, splitupstream safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/write/write.csv
    Writing database ./tmp/write/test_300000_40_100 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_100 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_100 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_100 with Haskell (streamly, chunked, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_100 with Haskell (streamly, chunked, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_100 with Haskell (streamly, splitupstream, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_100 with Haskell (streamly, splitupstream safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/write/write.csv
    Writing database ./tmp/write/test_300000_40_200 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_200 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_200 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_200 with Haskell (streamly, chunked, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_200 with Haskell (streamly, chunked, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_200 with Haskell (streamly, splitupstream, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_200 with Haskell (streamly, splitupstream safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/write/write.csv
    Writing database ./tmp/write/test_300000_40_300 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_300 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_300 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_300 with Haskell (streamly, chunked, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_300 with Haskell (streamly, chunked, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_300 with Haskell (streamly, splitupstream, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_40_300 with Haskell (streamly, splitupstream safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/write/write.csv
    Writing database ./tmp/write/test_300000_60_100 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_100 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_100 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_100 with Haskell (streamly, chunked, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_100 with Haskell (streamly, chunked, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_100 with Haskell (streamly, splitupstream, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_100 with Haskell (streamly, splitupstream safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/write/write.csv
    Writing database ./tmp/write/test_300000_60_200 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_200 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_200 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_200 with Haskell (streamly, chunked, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_200 with Haskell (streamly, chunked, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_200 with Haskell (streamly, splitupstream, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_200 with Haskell (streamly, splitupstream safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/write/write.csv
    Writing database ./tmp/write/test_300000_60_300 with C...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_300 with Haskell (plain, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_300 with Haskell (plain, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_300 with Haskell (streamly, chunked, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_300 with Haskell (streamly, chunked, safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_300 with Haskell (streamly, splitupstream, unsafeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Writing database ./tmp/write/test_300000_60_300 with Haskell (streamly, splitupstream safeffi)...
        Warming up... 1 2 3 done.
        Timing... 1 2 3 4 5 6 7 8 9 10 done.
    Appended results to ./tmp/write/write.csv
Time taken for write benchmarks: 2.511352 hours.
----------------------------------------
Test file read speeds with C? (y/N) (automatic yes)
BUFSIZ: 8192
    Removing ./tmp/c-file-read-tmp-files (if it exists)... done.
    Writing 150000 1-byte files (with Haskell)... done.
    Reading 150000 1-byte files (with C program; 1st time (directly from disk))...
        Microseconds / file: 2.581436206666667
    Reading 150000 1-byte files (with C program; 2nd time (possibly directly from memory))...
        Microseconds / file: 1.9013557066666669
    Reading 150000 1-byte files (with C program; 3rd time (possibly directly from memory))...
        Microseconds / file: 1.8954145200000003
    Reading 150000 1-byte files (with C program; 4th time (possibly directly from memory))...
        Microseconds / file: 1.8852547066666665
    Reading 150000 1-byte files (with C program; 5th time (possibly directly from memory))...
        Microseconds / file: 1.8866170199999999
    Removing ./tmp/c-file-read-tmp-files... done.
    Removing ./tmp/c-file-read-tmp-files (if it exists)... done.
    Writing 150000 4096-byte files (with Haskell)... done.
    Reading 150000 4096-byte files (with C program; 1st time (directly from disk))...
        Microseconds / file: 7.218120880000001
    Reading 150000 4096-byte files (with C program; 2nd time (possibly directly from memory))...
        Microseconds / file: 6.492101393333333
    Reading 150000 4096-byte files (with C program; 3rd time (possibly directly from memory))...
        Microseconds / file: 6.711960733333333
    Reading 150000 4096-byte files (with C program; 4th time (possibly directly from memory))...
        Microseconds / file: 6.5980335000000006
    Reading 150000 4096-byte files (with C program; 5th time (possibly directly from memory))...
        Microseconds / file: 6.645224213333333
    Removing ./tmp/c-file-read-tmp-files... done.
    Removing ./tmp/c-file-read-tmp-files (if it exists)... done.
    Writing 150000 8192-byte files (with Haskell)... done.
    Reading 150000 8192-byte files (with C program; 1st time (directly from disk))...
        Microseconds / file: 11.783784133333333
    Reading 150000 8192-byte files (with C program; 2nd time (possibly directly from memory))...
        Microseconds / file: 11.058556046666668
    Reading 150000 8192-byte files (with C program; 3rd time (possibly directly from memory))...
        Microseconds / file: 10.940094533333333
    Reading 150000 8192-byte files (with C program; 4th time (possibly directly from memory))...
        Microseconds / file: 11.02501128
    Reading 150000 8192-byte files (with C program; 5th time (possibly directly from memory))...
        Microseconds / file: 10.75920868
    Removing ./tmp/c-file-read-tmp-files... done.
    Removing ./tmp/c-file-read-tmp-files (if it exists)... done.
    Writing 75000 16384-byte files (with Haskell)... done.
    Reading 75000 16384-byte files (with C program; 1st time (directly from disk))...
        Microseconds / file: 20.061763266666667
    Reading 75000 16384-byte files (with C program; 2nd time (possibly directly from memory))...
        Microseconds / file: 19.084636399999997
    Reading 75000 16384-byte files (with C program; 3rd time (possibly directly from memory))...
        Microseconds / file: 19.174650186666664
    Reading 75000 16384-byte files (with C program; 4th time (possibly directly from memory))...
        Microseconds / file: 19.312306293333332
    Reading 75000 16384-byte files (with C program; 5th time (possibly directly from memory))...
        Microseconds / file: 18.916864373333333
    Removing ./tmp/c-file-read-tmp-files... done.
Output results to ./tmp/c-file-read/c-file-read.csv
Time taken for testing file read speeds: 0.115355 hours.
----------------------------------------
Test memcpy speed with C? (y/N) (automatic yes)
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
    Appended results to ./tmp/memcpy-speed/memcpy-speed.csv
Time taken for testing memcpy speed: 0.001522 hours.

